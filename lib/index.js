'use strict';

var fs = require('fs');
var path = require('path');
var chalk = require('chalk');

var isFunction = require('lodash/isFunction');
var isGeneratorFunction = require('./util/isGeneratorFunction');

function composeGenerator(file) {
  // :: establish where data is coming from
  var datatarget = path.resolve(file || path.resolve(__dirname, './sample-data-generator.js'));

  try {
    var datatarget_stats = fs.statSync(datatarget);
    if (!datatarget_stats.isFile()) {
      console.log(chalk.red('ERROR : Specified input is not a valid file.'));
      return;
    }
  } catch (err) {
    console.log(chalk.red('ERROR : Specified file does not exist.'));
    return;
  }

  var datasource;
  try {
    datasource = require(datatarget);
  } catch (err) {
    // :: file is not JSON or Javascript
    datasource = fs.readFileSync(datatarget).toString();
  }
  return isGeneratorFunction(datasource) ? datasource : function* genericGenerator() {
    while (true) {
      yield isFunction(datasource) ? datasource() : datasource;
    }
  };
}

function main(inputs, flags) {
  var Emitter = require('./emitter');

  var generator = composeGenerator(inputs[0]);
  if (!generator) {
    process.exit(-1);
  }

  Array(flags.nodes).fill('*').map(function (_) {
    return new Emitter({
      iterator: generator(),
      interval: flags.interval,
      limit: flags.limit
    }).start();
  });
}

module.exports = main;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksS0FBSyxRQUFRLElBQVIsQ0FBTDtBQUNKLElBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUDtBQUNKLElBQUksUUFBUSxRQUFRLE9BQVIsQ0FBUjs7QUFFSixJQUFJLGFBQWEsUUFBUSxtQkFBUixDQUFiO0FBQ0osSUFBSSxzQkFBc0IsUUFBUSw0QkFBUixDQUF0Qjs7QUFFSixTQUFTLGdCQUFULENBQTJCLElBQTNCLEVBQWlDOztBQUUvQixNQUFJLGFBQWEsS0FBSyxPQUFMLENBQWEsUUFBUSxLQUFLLE9BQUwsQ0FBYSxTQUFiLEVBQXdCLDRCQUF4QixDQUFSLENBQTFCLENBRjJCOztBQUkvQixNQUFJO0FBQ0YsUUFBSSxtQkFBbUIsR0FBRyxRQUFILENBQVksVUFBWixDQUFuQixDQURGO0FBRUYsUUFBSSxDQUFDLGlCQUFpQixNQUFqQixFQUFELEVBQTRCO0FBQzlCLGNBQVEsR0FBUixDQUFZLE1BQU0sR0FBTixDQUFVLDhDQUFWLENBQVosRUFEOEI7QUFFOUIsYUFGOEI7S0FBaEM7R0FGRixDQU1FLE9BQU8sR0FBUCxFQUFZO0FBQ1osWUFBUSxHQUFSLENBQVksTUFBTSxHQUFOLENBQVUsd0NBQVYsQ0FBWixFQURZO0FBRVosV0FGWTtHQUFaOztBQUtGLE1BQUksVUFBSixDQWYrQjtBQWdCL0IsTUFBSTtBQUNGLGlCQUFhLFFBQVEsVUFBUixDQUFiLENBREU7R0FBSixDQUVFLE9BQU8sR0FBUCxFQUFZOztBQUVaLGlCQUFhLEdBQUcsWUFBSCxDQUFnQixVQUFoQixFQUE0QixRQUE1QixFQUFiLENBRlk7R0FBWjtBQUlGLFNBQU8sb0JBQW9CLFVBQXBCLElBQ0gsVUFERyxHQUVILFVBQVcsZ0JBQVgsR0FBK0I7QUFDL0IsV0FBTyxJQUFQLEVBQWE7QUFDWCxZQUFNLFdBQVcsVUFBWCxJQUF5QixZQUF6QixHQUF3QyxVQUF4QyxDQURLO0tBQWI7R0FEQSxDQXhCMkI7Q0FBakM7O0FBK0JBLFNBQVMsSUFBVCxDQUFlLE1BQWYsRUFBdUIsS0FBdkIsRUFBOEI7QUFDNUIsTUFBSSxVQUFVLFFBQVEsV0FBUixDQUFWLENBRHdCOztBQUc1QixNQUFJLFlBQVksaUJBQWlCLE9BQU8sQ0FBUCxDQUFqQixDQUFaLENBSHdCO0FBSTVCLE1BQUksQ0FBQyxTQUFELEVBQVk7QUFDZCxZQUFRLElBQVIsQ0FBYSxDQUFDLENBQUQsQ0FBYixDQURjO0dBQWhCOztBQUlBLFFBQU0sTUFBTSxLQUFOLENBQU4sQ0FBbUIsSUFBbkIsQ0FBd0IsR0FBeEIsRUFBNkIsR0FBN0IsQ0FBaUMsYUFBSztBQUNwQyxXQUFPLElBQUksT0FBSixDQUFZO0FBQ2pCLGdCQUFVLFdBQVY7QUFDQSxnQkFBVSxNQUFNLFFBQU47QUFDVixhQUFPLE1BQU0sS0FBTjtLQUhGLEVBSUosS0FKSSxFQUFQLENBRG9DO0dBQUwsQ0FBakMsQ0FSNEI7Q0FBOUI7O0FBaUJBLE9BQU8sT0FBUCxHQUFpQixJQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5cbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnbG9kYXNoL2lzRnVuY3Rpb24nKVxudmFyIGlzR2VuZXJhdG9yRnVuY3Rpb24gPSByZXF1aXJlKCcuL3V0aWwvaXNHZW5lcmF0b3JGdW5jdGlvbicpXG5cbmZ1bmN0aW9uIGNvbXBvc2VHZW5lcmF0b3IgKGZpbGUpIHtcbiAgLy8gOjogZXN0YWJsaXNoIHdoZXJlIGRhdGEgaXMgY29taW5nIGZyb21cbiAgdmFyIGRhdGF0YXJnZXQgPSBwYXRoLnJlc29sdmUoZmlsZSB8fCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9zYW1wbGUtZGF0YS1nZW5lcmF0b3IuanMnKSlcblxuICB0cnkge1xuICAgIHZhciBkYXRhdGFyZ2V0X3N0YXRzID0gZnMuc3RhdFN5bmMoZGF0YXRhcmdldClcbiAgICBpZiAoIWRhdGF0YXJnZXRfc3RhdHMuaXNGaWxlKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLnJlZCgnRVJST1IgOiBTcGVjaWZpZWQgaW5wdXQgaXMgbm90IGEgdmFsaWQgZmlsZS4nKSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coY2hhbGsucmVkKCdFUlJPUiA6IFNwZWNpZmllZCBmaWxlIGRvZXMgbm90IGV4aXN0LicpKVxuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGRhdGFzb3VyY2VcbiAgdHJ5IHtcbiAgICBkYXRhc291cmNlID0gcmVxdWlyZShkYXRhdGFyZ2V0KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyA6OiBmaWxlIGlzIG5vdCBKU09OIG9yIEphdmFzY3JpcHRcbiAgICBkYXRhc291cmNlID0gZnMucmVhZEZpbGVTeW5jKGRhdGF0YXJnZXQpLnRvU3RyaW5nKClcbiAgfVxuICByZXR1cm4gaXNHZW5lcmF0b3JGdW5jdGlvbihkYXRhc291cmNlKVxuICAgID8gZGF0YXNvdXJjZVxuICAgIDogZnVuY3Rpb24gKiBnZW5lcmljR2VuZXJhdG9yICgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHlpZWxkIGlzRnVuY3Rpb24oZGF0YXNvdXJjZSkgPyBkYXRhc291cmNlKCkgOiBkYXRhc291cmNlXG4gICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWluIChpbnB1dHMsIGZsYWdzKSB7XG4gIHZhciBFbWl0dGVyID0gcmVxdWlyZSgnLi9lbWl0dGVyJylcblxuICB2YXIgZ2VuZXJhdG9yID0gY29tcG9zZUdlbmVyYXRvcihpbnB1dHNbMF0pXG4gIGlmICghZ2VuZXJhdG9yKSB7XG4gICAgcHJvY2Vzcy5leGl0KC0xKVxuICB9XG5cbiAgQXJyYXkoZmxhZ3Mubm9kZXMpLmZpbGwoJyonKS5tYXAoXyA9PiB7XG4gICAgcmV0dXJuIG5ldyBFbWl0dGVyKHtcbiAgICAgIGl0ZXJhdG9yOiBnZW5lcmF0b3IoKSxcbiAgICAgIGludGVydmFsOiBmbGFncy5pbnRlcnZhbCxcbiAgICAgIGxpbWl0OiBmbGFncy5saW1pdFxuICAgIH0pLnN0YXJ0KClcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYWluXG4iXX0=