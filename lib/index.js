'use strict';

var fs = require('fs');
var path = require('path');
var chalk = require('chalk');

var isFunction = require('lodash/isFunction');
var isGeneratorFunction = require('./util/isGeneratorFunction');

var Emitter = require('./emitter');

function composeGenerator(file) {
  // :: establish where data is coming from
  var datatarget = path.resolve(file || path.resolve(__dirname, './sample-data-generator.js'));

  try {
    var datatarget_stats = fs.statSync(datatarget);
    if (!datatarget_stats.isFile()) {
      console.log(chalk.red('ERROR : Specified input is not a valid file.'));
      return;
    }
  } catch (err) {
    console.log(chalk.red('ERROR : Specified file does not exist.'));
    return;
  }

  var datasource;
  try {
    datasource = require(datatarget);
  } catch (err) {
    // :: file is not JSON or Javascript
    datasource = fs.readFileSync(datatarget).toString();
  }
  return isGeneratorFunction(datasource) ? datasource : function* genericGenerator() {
    while (true) {
      yield isFunction(datasource) ? datasource() : datasource;
    }
  };
}

function main(inputs, flags) {
  var generator = composeGenerator(inputs[0]);
  if (!generator) {
    process.exit(-1);
  }

  Array(flags.nodes).fill('*').map(function (_) {
    return new Emitter({
      iterator: generator(),
      interval: flags.interval,
      limit: flags.limit
    }).start();
  });
}

module.exports = main;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksS0FBSyxRQUFRLElBQVIsQ0FBTDtBQUNKLElBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUDtBQUNKLElBQUksUUFBUSxRQUFRLE9BQVIsQ0FBUjs7QUFFSixJQUFJLGFBQWEsUUFBUSxtQkFBUixDQUFiO0FBQ0osSUFBSSxzQkFBc0IsUUFBUSw0QkFBUixDQUF0Qjs7QUFFSixJQUFJLFVBQVUsUUFBUSxXQUFSLENBQVY7O0FBRUosU0FBUyxnQkFBVCxDQUEyQixJQUEzQixFQUFpQzs7QUFFL0IsTUFBSSxhQUFhLEtBQUssT0FBTCxDQUFhLFFBQVEsS0FBSyxPQUFMLENBQWEsU0FBYixFQUF3Qiw0QkFBeEIsQ0FBUixDQUExQixDQUYyQjs7QUFJL0IsTUFBSTtBQUNGLFFBQUksbUJBQW1CLEdBQUcsUUFBSCxDQUFZLFVBQVosQ0FBbkIsQ0FERjtBQUVGLFFBQUksQ0FBQyxpQkFBaUIsTUFBakIsRUFBRCxFQUE0QjtBQUM5QixjQUFRLEdBQVIsQ0FBWSxNQUFNLEdBQU4sQ0FBVSw4Q0FBVixDQUFaLEVBRDhCO0FBRTlCLGFBRjhCO0tBQWhDO0dBRkYsQ0FNRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFlBQVEsR0FBUixDQUFZLE1BQU0sR0FBTixDQUFVLHdDQUFWLENBQVosRUFEWTtBQUVaLFdBRlk7R0FBWjs7QUFLRixNQUFJLFVBQUosQ0FmK0I7QUFnQi9CLE1BQUk7QUFDRixpQkFBYSxRQUFRLFVBQVIsQ0FBYixDQURFO0dBQUosQ0FFRSxPQUFPLEdBQVAsRUFBWTs7QUFFWixpQkFBYSxHQUFHLFlBQUgsQ0FBZ0IsVUFBaEIsRUFBNEIsUUFBNUIsRUFBYixDQUZZO0dBQVo7QUFJRixTQUFPLG9CQUFvQixVQUFwQixJQUNILFVBREcsR0FFSCxVQUFXLGdCQUFYLEdBQStCO0FBQy9CLFdBQU8sSUFBUCxFQUFhO0FBQ1gsWUFBTSxXQUFXLFVBQVgsSUFBeUIsWUFBekIsR0FBd0MsVUFBeEMsQ0FESztLQUFiO0dBREEsQ0F4QjJCO0NBQWpDOztBQStCQSxTQUFTLElBQVQsQ0FBZSxNQUFmLEVBQXVCLEtBQXZCLEVBQThCO0FBQzVCLE1BQUksWUFBWSxpQkFBaUIsT0FBTyxDQUFQLENBQWpCLENBQVosQ0FEd0I7QUFFNUIsTUFBSSxDQUFDLFNBQUQsRUFBWTtBQUNkLFlBQVEsSUFBUixDQUFhLENBQUMsQ0FBRCxDQUFiLENBRGM7R0FBaEI7O0FBSUEsUUFBTSxNQUFNLEtBQU4sQ0FBTixDQUFtQixJQUFuQixDQUF3QixHQUF4QixFQUE2QixHQUE3QixDQUFpQyxhQUFLO0FBQ3BDLFdBQU8sSUFBSSxPQUFKLENBQVk7QUFDakIsZ0JBQVUsV0FBVjtBQUNBLGdCQUFVLE1BQU0sUUFBTjtBQUNWLGFBQU8sTUFBTSxLQUFOO0tBSEYsRUFJSixLQUpJLEVBQVAsQ0FEb0M7R0FBTCxDQUFqQyxDQU40QjtDQUE5Qjs7QUFlQSxPQUFPLE9BQVAsR0FBaUIsSUFBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKCdmcycpXHJcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXHJcbnZhciBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcclxuXHJcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnbG9kYXNoL2lzRnVuY3Rpb24nKVxyXG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IHJlcXVpcmUoJy4vdXRpbC9pc0dlbmVyYXRvckZ1bmN0aW9uJylcclxuXHJcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnLi9lbWl0dGVyJylcclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VHZW5lcmF0b3IgKGZpbGUpIHtcclxuICAvLyA6OiBlc3RhYmxpc2ggd2hlcmUgZGF0YSBpcyBjb21pbmcgZnJvbVxyXG4gIHZhciBkYXRhdGFyZ2V0ID0gcGF0aC5yZXNvbHZlKGZpbGUgfHwgcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4vc2FtcGxlLWRhdGEtZ2VuZXJhdG9yLmpzJykpXHJcblxyXG4gIHRyeSB7XHJcbiAgICB2YXIgZGF0YXRhcmdldF9zdGF0cyA9IGZzLnN0YXRTeW5jKGRhdGF0YXJnZXQpXHJcbiAgICBpZiAoIWRhdGF0YXJnZXRfc3RhdHMuaXNGaWxlKCkpIHtcclxuICAgICAgY29uc29sZS5sb2coY2hhbGsucmVkKCdFUlJPUiA6IFNwZWNpZmllZCBpbnB1dCBpcyBub3QgYSB2YWxpZCBmaWxlLicpKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUubG9nKGNoYWxrLnJlZCgnRVJST1IgOiBTcGVjaWZpZWQgZmlsZSBkb2VzIG5vdCBleGlzdC4nKSlcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgdmFyIGRhdGFzb3VyY2VcclxuICB0cnkge1xyXG4gICAgZGF0YXNvdXJjZSA9IHJlcXVpcmUoZGF0YXRhcmdldClcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIC8vIDo6IGZpbGUgaXMgbm90IEpTT04gb3IgSmF2YXNjcmlwdFxyXG4gICAgZGF0YXNvdXJjZSA9IGZzLnJlYWRGaWxlU3luYyhkYXRhdGFyZ2V0KS50b1N0cmluZygpXHJcbiAgfVxyXG4gIHJldHVybiBpc0dlbmVyYXRvckZ1bmN0aW9uKGRhdGFzb3VyY2UpXHJcbiAgICA/IGRhdGFzb3VyY2VcclxuICAgIDogZnVuY3Rpb24gKiBnZW5lcmljR2VuZXJhdG9yICgpIHtcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB5aWVsZCBpc0Z1bmN0aW9uKGRhdGFzb3VyY2UpID8gZGF0YXNvdXJjZSgpIDogZGF0YXNvdXJjZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1haW4gKGlucHV0cywgZmxhZ3MpIHtcclxuICB2YXIgZ2VuZXJhdG9yID0gY29tcG9zZUdlbmVyYXRvcihpbnB1dHNbMF0pXHJcbiAgaWYgKCFnZW5lcmF0b3IpIHtcclxuICAgIHByb2Nlc3MuZXhpdCgtMSlcclxuICB9XHJcblxyXG4gIEFycmF5KGZsYWdzLm5vZGVzKS5maWxsKCcqJykubWFwKF8gPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBFbWl0dGVyKHtcclxuICAgICAgaXRlcmF0b3I6IGdlbmVyYXRvcigpLFxyXG4gICAgICBpbnRlcnZhbDogZmxhZ3MuaW50ZXJ2YWwsXHJcbiAgICAgIGxpbWl0OiBmbGFncy5saW1pdFxyXG4gICAgfSkuc3RhcnQoKVxyXG4gIH0pXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbWFpblxyXG4iXX0=