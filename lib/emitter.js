'use strict';

var crypto = require('crypto');
var uuid = require('uuid');
var got = require('got');
var assign = require('lodash/assign');

var config = require('./config');

var cache = new WeakMap();

function createToken(url, keyname, keyvalue) {
  var hmac = crypto.createHmac('sha256', keyvalue);

  // :: give this token 24 hours before it expires
  var expiry = ~ ~(+new Date() / 1000) + 60 * 60 * 24;

  hmac.update(`${ encodeURIComponent(url) }\n${ expiry }`);
  var signature = hmac.digest('base64');

  return `SharedAccessSignature sr=${ encodeURIComponent(url) }&sig=${ encodeURIComponent(signature) }&se=${ expiry }&skn=${ keyname }`;
}

class Emitter {
  constructor(opts) {
    var cachebag = assign({}, opts);

    this.name = uuid.v4();
    cachebag.__hubUrl = `https://${ config.namespace }/${ config.eventhubname }/publishers/${ this.name }/messages`;
    cachebag.__sasToken = createToken(cachebag.__hubUrl, config.sak_name, config.sak_value);

    cache.set(this, cachebag);
  }

  emit() {
    var _this = this;

    var cachebag = cache.get(this);
    var record = cachebag.iterator.next().value;

    got(cachebag.__hubUrl, {
      method: 'POST',
      body: record,
      headers: {
        'Authorization': cachebag.__sasToken
      }
    }).then(function (_) {
      console.log(`Event sent from ${ _this.name }`);
    }).catch(function (err) {
      console.log(err);
    });
  }

  start() {
    var _this2 = this;

    var count = 0;
    var timing = setInterval(function (_) {
      _this2.emit();
      if (++count === cache.get(_this2).limit) {
        clearInterval(timing);
      }
    }, cache.get(this).interval);

    return this;
  }
}

module.exports = Emitter;
//# sourceMappingURL=data:application/json;base64,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aUIsT0FBakIiLCJmaWxlIjoiZW1pdHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xyXG5cclxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXHJcbnZhciB1dWlkID0gcmVxdWlyZSgndXVpZCcpXHJcbnZhciBnb3QgPSByZXF1aXJlKCdnb3QnKVxyXG52YXIgYXNzaWduID0gcmVxdWlyZSgnbG9kYXNoL2Fzc2lnbicpXHJcblxyXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxyXG5cclxudmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVG9rZW4gKHVybCwga2V5bmFtZSwga2V5dmFsdWUpIHtcclxuICB2YXIgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBrZXl2YWx1ZSlcclxuXHJcbiAgLy8gOjogZ2l2ZSB0aGlzIHRva2VuIDI0IGhvdXJzIGJlZm9yZSBpdCBleHBpcmVzXHJcbiAgdmFyIGV4cGlyeSA9ICh+figrbmV3IERhdGUoKSAvIDEwMDApKSArICg2MCAqIDYwICogMjQpXHJcblxyXG4gIGhtYWMudXBkYXRlKGAkeyBlbmNvZGVVUklDb21wb25lbnQodXJsKSB9XFxuJHsgZXhwaXJ5IH1gKVxyXG4gIHZhciBzaWduYXR1cmUgPSBobWFjLmRpZ2VzdCgnYmFzZTY0JylcclxuXHJcbiAgcmV0dXJuIGBTaGFyZWRBY2Nlc3NTaWduYXR1cmUgc3I9JHsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkgfSZzaWc9JHsgZW5jb2RlVVJJQ29tcG9uZW50KHNpZ25hdHVyZSkgfSZzZT0keyBleHBpcnkgfSZza249JHsga2V5bmFtZSB9YFxyXG59XHJcblxyXG5jbGFzcyBFbWl0dGVyIHtcclxuICBjb25zdHJ1Y3RvciAob3B0cykge1xyXG4gICAgdmFyIGNhY2hlYmFnID0gYXNzaWduKHt9LCBvcHRzKVxyXG5cclxuICAgIHRoaXMubmFtZSA9IHV1aWQudjQoKVxyXG4gICAgY2FjaGViYWcuX19odWJVcmwgPSBgaHR0cHM6Ly8keyBjb25maWcubmFtZXNwYWNlIH0vJHsgY29uZmlnLmV2ZW50aHVibmFtZSB9L3B1Ymxpc2hlcnMvJHsgdGhpcy5uYW1lIH0vbWVzc2FnZXNgXHJcbiAgICBjYWNoZWJhZy5fX3Nhc1Rva2VuID0gY3JlYXRlVG9rZW4oY2FjaGViYWcuX19odWJVcmwsIGNvbmZpZy5zYWtfbmFtZSwgY29uZmlnLnNha192YWx1ZSlcclxuXHJcbiAgICBjYWNoZS5zZXQodGhpcywgY2FjaGViYWcpXHJcbiAgfVxyXG5cclxuICBlbWl0ICgpIHtcclxuICAgIHZhciBjYWNoZWJhZyA9IGNhY2hlLmdldCh0aGlzKVxyXG4gICAgdmFyIHJlY29yZCA9IGNhY2hlYmFnLml0ZXJhdG9yLm5leHQoKS52YWx1ZVxyXG5cclxuICAgIGdvdChjYWNoZWJhZy5fX2h1YlVybCwge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgYm9keTogcmVjb3JkLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBjYWNoZWJhZy5fX3Nhc1Rva2VuXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAgIC50aGVuKF8gPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBFdmVudCBzZW50IGZyb20gJHsgdGhpcy5uYW1lIH1gKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdGFydCAoKSB7XHJcbiAgICB2YXIgY291bnQgPSAwXHJcbiAgICB2YXIgdGltaW5nID0gc2V0SW50ZXJ2YWwoXyA9PiB7XHJcbiAgICAgIHRoaXMuZW1pdCgpXHJcbiAgICAgIGlmICgrK2NvdW50ID09PSBjYWNoZS5nZXQodGhpcykubGltaXQpIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHRpbWluZylcclxuICAgICAgfVxyXG4gICAgfSwgY2FjaGUuZ2V0KHRoaXMpLmludGVydmFsKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXJcclxuIl19